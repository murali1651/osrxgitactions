name: Build and Deploy to CloudHub 2.0 (Development - Sandbox)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Mule Application
        run: mvn clean package -DskipTests

      - name: Deploy to CloudHub 2.0 (Development - Sandbox)
        env:
          ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_PLATFORM_USERNAME }}
          ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PLATFORM_PASSWORD }}
          ORG_ID: 6555a347-8bc4-4f41-986e-76a35def9b0a
          ENV_NAME: "Development"
          ENV_TYPE: "sandbox"
          APP_NAME: "your-app-name" # üîÅ change this to your Mule app name
        run: |
          echo "üîê Authenticating to Anypoint Platform..."
          TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/login \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$ANYPOINT_USERNAME\", \"password\":\"$ANYPOINT_PASSWORD\"}" | jq -r '.access_token')

          if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
            echo "‚ùå Failed to authenticate to Anypoint Platform."
            exit 1
          fi

          echo "‚úÖ Authenticated successfully."
          echo "üåç Finding environment: $ENV_NAME ($ENV_TYPE)"

          # Find Environment ID by name and type
          ENV_ID=$(curl -s -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$ORG_ID/environments" \
            -H "Authorization: Bearer $TOKEN" | jq -r ".data[] | select(.name==\"$ENV_NAME\" and .type==\"$ENV_TYPE\") | .id")

          if [ -z "$ENV_ID" ]; then
            echo "‚ùå Environment $ENV_NAME ($ENV_TYPE) not found in organization $ORG_ID"
            exit 1
          fi

          echo "‚úÖ Found environment ID: $ENV_ID"

          # Get CloudHub 2.0 Target (Shared Space)
          echo "üîç Fetching CloudHub 2.0 targets..."
          TARGETS=$(curl -s -X GET "https://anypoint.mulesoft.com/runtimefabric/api/organizations/$ORG_ID/environments/$ENV_ID/targets" \
            -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json")

          if echo "$TARGETS" | grep -q '"status":403'; then
            echo "‚ùå Forbidden (403): Missing permissions to access CloudHub 2.0 targets."
            echo "   üëâ Please ensure your user has 'CloudHub Admin' or 'Runtime Manager Deployer' roles."
            exit 1
          fi

          SHARED_SPACE_ID=$(echo "$TARGETS" | jq -r '.[] | select(.isShared==true) | .id')

          if [ -z "$SHARED_SPACE_ID" ]; then
            echo "‚ùå Could not find CloudHub 2.0 Shared Space for environment $ENV_NAME."
            echo "$TARGETS"
            exit 1
          fi

          echo "‚úÖ Found CloudHub 2.0 Shared Space: $SHARED_SPACE_ID"

          # Locate built artifact (JAR)
          ARTIFACT_PATH=$(find target -name "*.jar" | head -n 1)
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "‚ùå No Mule JAR found in target directory."
            exit 1
          fi

          echo "üì¶ Artifact found: $ARTIFACT_PATH"

          # Prepare deployment payload
          DEPLOY_PAYLOAD=$(jq -n \
            --arg name "$APP_NAME" \
            --arg targetId "$SHARED_SPACE_ID" \
            --arg runtimeVersion "4.6.6" \
            --argjson replicas 1 \
            --argjson vCores 0.1 \
            '{name: $name, target: {targetId: $targetId}, desiredReplicas: $replicas, desiredSize: $vCores, muleVersion: {version: $runtimeVersion}, persistentQueues: false, clustered: false}'
          )

          echo "üöÄ Deploying application $APP_NAME to CloudHub 2.0 (Development)..."

          RESPONSE=$(curl -s -X POST "https://anypoint.mulesoft.com/cloudhub/api/v2/applications" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$DEPLOY_PAYLOAD")

          echo "‚úÖ Deployment request submitted."
          echo "Response: $RESPONSE"
